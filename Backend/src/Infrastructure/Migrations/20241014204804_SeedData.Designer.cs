// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241014204804_SeedData")]
    partial class SeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.BlogPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("blogPosts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            Content = "This is the first post.",
                            CreatedAt = new DateTime(2024, 10, 14, 20, 48, 4, 296, DateTimeKind.Utc).AddTicks(8038),
                            Title = "First Post"
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 1,
                            Content = "This is the second post.",
                            CreatedAt = new DateTime(2024, 10, 14, 20, 48, 4, 296, DateTimeKind.Utc).AddTicks(8043),
                            Title = "Second Post"
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 1,
                            Content = "This is the third post.",
                            CreatedAt = new DateTime(2024, 10, 14, 20, 48, 4, 296, DateTimeKind.Utc).AddTicks(8045),
                            Title = "Third Post"
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 1,
                            Content = "This is the fourth post.",
                            CreatedAt = new DateTime(2024, 10, 14, 20, 48, 4, 296, DateTimeKind.Utc).AddTicks(8048),
                            Title = "Fourth Post"
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 1,
                            Content = "This is the fifth post.",
                            CreatedAt = new DateTime(2024, 10, 14, 20, 48, 4, 296, DateTimeKind.Utc).AddTicks(8053),
                            Title = "Fifth Post"
                        },
                        new
                        {
                            Id = 6,
                            AuthorId = 1,
                            Content = "This is the sixth post.",
                            CreatedAt = new DateTime(2024, 10, 14, 20, 48, 4, 296, DateTimeKind.Utc).AddTicks(8054),
                            Title = "Sixth Post"
                        });
                });

            modelBuilder.Entity("Domain.Entities.BlogPostCategory", b =>
                {
                    b.Property<int>("BlogPostId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("BlogPostId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("BlogPostCategories");

                    b.HasData(
                        new
                        {
                            BlogPostId = 1,
                            CategoryId = 1
                        },
                        new
                        {
                            BlogPostId = 1,
                            CategoryId = 2
                        },
                        new
                        {
                            BlogPostId = 2,
                            CategoryId = 3
                        },
                        new
                        {
                            BlogPostId = 2,
                            CategoryId = 4
                        },
                        new
                        {
                            BlogPostId = 3,
                            CategoryId = 5
                        },
                        new
                        {
                            BlogPostId = 3,
                            CategoryId = 6
                        },
                        new
                        {
                            BlogPostId = 4,
                            CategoryId = 7
                        },
                        new
                        {
                            BlogPostId = 4,
                            CategoryId = 8
                        },
                        new
                        {
                            BlogPostId = 5,
                            CategoryId = 9
                        },
                        new
                        {
                            BlogPostId = 5,
                            CategoryId = 10
                        },
                        new
                        {
                            BlogPostId = 6,
                            CategoryId = 1
                        },
                        new
                        {
                            BlogPostId = 6,
                            CategoryId = 2
                        });
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Technology"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Health"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Lifestyle"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Science"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Education"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Travel"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Food"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Finance"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Sports"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Entertainment"
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 10, 14, 20, 48, 4, 296, DateTimeKind.Utc).AddTicks(7935),
                            Email = "user1@example.com",
                            PasswordHash = new byte[] { 195, 218, 249, 241, 148, 149, 224, 180, 99, 41, 128, 171, 211, 115, 52, 61, 238, 7, 157, 71, 181, 85, 242, 102, 68, 226, 12, 86, 31, 122, 239, 209, 15, 185, 235, 236, 61, 223, 223, 104, 40, 245, 158, 116, 34, 89, 107, 205, 158, 45, 37, 5, 220, 223, 154, 200, 175, 78, 161, 193, 255, 93, 23, 141 },
                            PasswordSalt = new byte[] { 190, 72, 114, 117, 225, 148, 152, 77, 72, 83, 75, 17, 52, 188, 175, 165 },
                            Username = "User1"
                        });
                });

            modelBuilder.Entity("Domain.Entities.BlogPost", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("BlogPosts")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.BlogPostCategory", b =>
                {
                    b.HasOne("Domain.Entities.BlogPost", "BlogPost")
                        .WithMany("BlogPostCategories")
                        .HasForeignKey("BlogPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Category", "Category")
                        .WithMany("BlogPostCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BlogPost");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Domain.Entities.BlogPost", b =>
                {
                    b.Navigation("BlogPostCategories");
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Navigation("BlogPostCategories");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("BlogPosts");
                });
#pragma warning restore 612, 618
        }
    }
}
