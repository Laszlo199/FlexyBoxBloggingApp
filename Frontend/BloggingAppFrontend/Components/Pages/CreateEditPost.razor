@page "/post-editor/{id:int?}"
@inject NavigationManager Navigation
@inject IBlogPostService BlogPostService
@inject ICategoryService CategoryService
@rendermode InteractiveServer
@using BloggingAppFrontend.Application.Dtos
@using BloggingAppFrontend.Application.Dtos.BlogPsotDto
@using BloggingAppFrontend.Application.Services

<div class="container mt-5">
    <h1 class="text-center mb-4">@((isEditMode ? "Edit Post" : "Create a New Post"))</h1>

    <div class="row justify-content-center">
        <div class="col-md-8">
            <!-- Post Title -->
            <div class="mb-3">
                <label for="postTitle" class="form-label">Post Title</label>
                <input type="text" class="form-control" id="postTitle" @bind="blogPostDto.Title" placeholder="Enter your post title..." required>
            </div>

            <!-- Dropdown with Search -->
            <div class="dropdown mb-3">
                <button class="btn btn-secondary dropdown-toggle" type="button" @onclick="ToggleDropdown">
                    Categories
                </button>
                <div class="dropdown-menu @dropdownClass">
                    <input type="text" class="form-control" placeholder="Search..." @bind="categorySearchTerm" @oninput="OnCategorySearch" />
                    @foreach (var category in filteredCategories)
                    {
                        <a class="dropdown-item" href="javascript:void(0)" @onclick="() => SelectCategory(category)">@category.Name</a>
                    }
                </div>
            </div>

            <!-- Selected Categories -->
            <div class="mb-3">
                <label class="form-label">Selected Categories</label>
                <div class="d-flex flex-wrap">
                    @foreach (var category in selectedCategories)
                    {
                        <span class="badge bg-info text-dark m-1">
                            #@category.Name
                            <button type="button" class="btn-close ms-2" aria-label="Close" @onclick="() => RemoveCategory(category)"></button>
                        </span>
                    }
                </div>
            </div>

            <!-- Post Content -->
            <div class="mb-3">
                <label for="postContent" class="form-label">Post Content</label>
                <textarea id="postContent" class="form-control" rows="8" @bind="blogPostDto.Content" placeholder="Write your post content..."></textarea>
            </div>

            <!-- Action Buttons -->
            <div class="d-flex justify-content-end">
                <button type="button" class="btn btn-secondary me-2" @onclick="Cancel">Cancel</button>
                <button type="button" class="btn btn-primary" @onclick="PublishPost">Publish</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int? id { get; set; }

    private CreateBlogPostDto blogPostDto = new CreateBlogPostDto();
    private bool isEditMode;
    private string categorySearchTerm = string.Empty;
    private string dropdownClass = string.Empty;
    private List<CategoryDto> allCategories = new List<CategoryDto>();
    private List<CategoryDto> filteredCategories = new List<CategoryDto>();
    private List<CategoryDto> selectedCategories = new List<CategoryDto>();
    private bool categoriesLoaded = false;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !categoriesLoaded)
        {

            allCategories = (await CategoryService.GetAllCategories()).ToList();
            filteredCategories = allCategories;
            categoriesLoaded = true;
            StateHasChanged();
        }
    }

    private Task<CreateBlogPostDto> LoadPostById(int postId)
    {
        return Task.FromResult(new CreateBlogPostDto
        {
            Title = "Sample Post",
            Content = "<p>This is the content of the sample post.</p>",
            AuthorId = 1,
            CategoryIds = new List<int> { 1, 2 }
        });
    }

    private async Task PublishPost()
    {
        blogPostDto.AuthorId = 1;

        if (isEditMode)
        {
            await BlogPostService.UpdatePost(id.Value, blogPostDto);
        }
        else
        {
            await BlogPostService.CreatePost(blogPostDto);
        }

        Navigation.NavigateTo("/");
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/");
    }

    private void ToggleDropdown()
    {
        dropdownClass = dropdownClass == "show" ? string.Empty : "show";
    }

    // Filter categories based on search term
    private void OnCategorySearch(ChangeEventArgs e)
    {
        var searchTerm = e.Value.ToString()?.ToLower() ?? string.Empty;
        filteredCategories = allCategories
            .Where(c => c.Name.ToLower().Contains(searchTerm) && !selectedCategories.Any(sc => sc.Id == c.Id))
            .ToList();
    }

    // Handle category selection
    private void SelectCategory(CategoryDto category)
    {
        if (!selectedCategories.Any(c => c.Id == category.Id))
        {
            selectedCategories.Add(category);
        }

        filteredCategories.Remove(category);

        blogPostDto.CategoryIds = selectedCategories.Select(c => c.Id).ToList();
    }

    // Remove a selected category
    private void RemoveCategory(CategoryDto category)
    {
        selectedCategories.Remove(category);
        filteredCategories.Add(category);

        blogPostDto.CategoryIds = selectedCategories.Select(c => c.Id).ToList();
    }
}