@page "/post-editor/{id:int?}"
@inject NavigationManager Navigation
@inject IBlogPostService BlogPostService
@using Blazored.TextEditor
@using BloggingAppFrontend.Application.Dtos.BlogPsotDto
@using BloggingAppFrontend.Application.Services

<div class="container mt-5">
    <h1 class="text-center mb-4">@((isEditMode ? "Edit Post" : "Create a New Post"))</h1>

    <div class="row justify-content-center">
        <div class="col-md-8">
            <!-- Post Title -->
            <div class="mb-3">
                <label for="postTitle" class="form-label">Post Title</label>
                <input type="text" class="form-control" id="postTitle" @bind="blogPostDto.Title" placeholder="Enter your post title..." required>
            </div>

            <!-- Category Selection -->
            <div class="mb-3">
                <label for="categories" class="form-label">Select Categories</label>
                <select id="categories" class="form-select" multiple @onchange="OnCategoriesSelected">
                    <option value="1">Technology</option>
                    <option value="2">Health</option>
                    <option value="3">Lifestyle</option>
                    <option value="4">Business</option>
                </select>
            </div>
            <!-- Action Buttons -->
            <div class="d-flex justify-content-end">
                <button type="button" class="btn btn-secondary me-2" @onclick="Cancel">Cancel</button>
                <button type="button" class="btn btn-primary" @onclick="PublishPost">Publish</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int? id { get; set; }

    private CreateBlogPostDto blogPostDto = new CreateBlogPostDto();
    private bool isEditMode;

    // Blazored Text Editor reference
    private MarkupString preview;

    protected override async Task OnInitializedAsync()
    {
        isEditMode = id.HasValue;

        if (isEditMode)
        {
            // Load the post for editing
            blogPostDto = await LoadPostById(id.Value);
        }
    }

    private Task<CreateBlogPostDto> LoadPostById(int postId)
    {
        return Task.FromResult(new CreateBlogPostDto
        {
            Title = "Sample Post",
            Content = "<p>This is the content of the sample post.</p>",
            AuthorId = 1,
            CategoryIds = new List<int> { 1, 2 }
        });
    }

    private async Task PublishPost()
    {
        // Get the content from the Blazored Text Editor
        blogPostDto.Content = await textEditor.GetHTML();

        if (isEditMode)
        {
            await BlogPostService.UpdatePost(id.Value, blogPostDto);
        }
        else
        {
            await BlogPostService.CreatePost(blogPostDto);
        }

        Navigation.NavigateTo("/");
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/");
    }

    private void OnCategoriesSelected(ChangeEventArgs e)
    {
        // Handle category selection
        var selectedOptions = ((IEnumerable<string>)e.Value).Select(int.Parse).ToList();
        blogPostDto.CategoryIds = selectedOptions;
    }
}