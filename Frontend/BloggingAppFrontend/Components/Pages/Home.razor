@page "/"
@using BloggingAppFrontend.Application.AuthGuard
@using BloggingAppFrontend.Application.Dtos
@using BloggingAppFrontend.Application.Dtos.BlogPsotDto
@using BloggingAppFrontend.Application.Services
@using Microsoft.AspNetCore.Authentication
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject IBlogPostService BlogPostService
@inject ICategoryService CategoryService
@inject IAuthService AuthService
@inject CustomAuthStateProvider AuthStateProvider

<!-- Search and Filter Section -->
<div class="container mt-5">
    <div class="text-center mb-4">
        <h1 class="display-4 fw-bold text-primary">Latest Blog Posts</h1>
        <p class="text-muted">Catch up with our most recent stories and updates!</p>
    </div>

    <div class="mb-4">
        <!-- Search Input -->
        <div class="d-flex justify-content-between align-items-center mb-3">
            <input type="text" class="form-control me-2" @bind="searchTerm" placeholder="Search Blog Posts by Title..." style="flex: 3;" />

            <!-- Categories Dropdown -->
            <div class="dropdown me-2" style="flex: 1;">
                <button class="btn btn-light dropdown-toggle w-100" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-expanded="false">
                    @selectedCategoryText
                </button>
                <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                    @foreach (var category in categories)
                    {
                        <li><a class="dropdown-item" @onclick="() => SelectCategory(category)">@category.Name</a></li>
                    }
                </ul>
            </div>
        </div>

        <!-- Selected Categories -->
        <div class="mb-4">
            @if (selectedCategories.Count > 0)
            {
                @foreach (var category in selectedCategories)
                {
                    <span class="badge bg-info me-2">
                        @category.Name
                        <button type="button" class="btn-close btn-close-white ms-1" aria-label="Close" @onclick="() => RemoveCategory(category)"></button>
                    </span>
                }
            }
            else
            {
                <p class="text-muted">No categories selected.</p>
            }
        </div>
    </div>

    <div class="row g-4">
        @if (blogPosts == null)
        {
            <p>Loading...</p>
        }
        else
        {
            @foreach (var post in FilteredPosts())
            {
                <div class="col-md-12 col-lg-6">
                    <!-- 2 cards per row on larger screens -->
                    <div class="card shadow-sm h-100 border-0 fixed-height-card" style="border-radius: 12px;">
                        <a href="@($"/post/{post.Id}")" class="text-decoration-none text-reset">
                            <img src="https://picsum.photos/600/300?random=@post.Id" class="card-img-top" alt="Blog image" style="border-top-left-radius: 12px; border-top-right-radius: 12px;">
                        </a>
                        <div class="card-body">
                            <a href="@($"/post/{post.Id}")" class="text-decoration-none text-reset card-content">
                                <p class="text-muted mb-1">@post.CreatedAt.ToString("MMMM dd, yyyy")</p>
                                <p class="text-muted">By @post.AuthorName</p>

                                <!-- Display Categories with Smaller Badge Style -->
                                <p class="text-muted">
                                    @foreach (var category in post.Categories)
                                    {
                                        <span class="category-badge">#@category.Name</span>
                                    }
                                </p>

                                <h5 class="card-title text-dark card-content">@post.Title</h5>
                                <p class="card-text text-secondary card-content">@post.Content.Substring(0, Math.Min(120, post.Content.Length))...</p>
                            </a>
                        </div>
                        <div class="card-footer d-flex justify-content-between align-items-center">
                            <div>
                                <i class="@(likedPosts.Contains(post.Id) ? "bi bi-heart-fill" : "bi bi-heart")" @onclick="() => ToggleHeart(post.Id)" style="cursor: pointer; color: red;"></i>
                                <i class="bi bi-share ms-3" style="cursor: pointer;"></i>
                            </div>
                            @if (post.AuthorId == loggedInUserId)
                            {
                                <div class="dropdown three-dots" style="flex-shrink: 0;">
                                    <i class="bi bi-three-dots-vertical text-muted" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-expanded="false" style="cursor: pointer;"></i>
                                    <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="dropdownMenuButton">
                                        <li><a class="dropdown-item" href="@($"/post-editor/{post.Id}")">Edit</a></li>
                                        <li><a class="dropdown-item" @onclick="() => DeletePost(post.Id)">Delete</a></li>
                                    </ul>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
        }
    </div>
</div>

@code {
    private string searchTerm = string.Empty;
    private string selectedCategoryText = "Select Category";
    private List<CategoryDto> categories = new List<CategoryDto>();
    private List<CategoryDto> selectedCategories = new List<CategoryDto>();
    private List<BlogPostDto>? blogPosts;
    private int? loggedInUserId;
    private HashSet<int> likedPosts = new HashSet<int>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            loggedInUserId = await AuthStateProvider.GetUserIdFromSessionState();
            Console.WriteLine($"Logged in user ID: {loggedInUserId}");
            await LoadBlogPosts();
            await LoadCategories();
            StateHasChanged();
        }
    }

    private async Task LoadBlogPosts()
    {
        var posts = await BlogPostService.GetAllPosts();
        blogPosts = posts?.ToList() ?? new List<BlogPostDto>();
    }
     
    private async Task LoadCategories()
    {
        var fetchedCategories = await CategoryService.GetAllCategories();
        categories = fetchedCategories?.ToList() ?? new List<CategoryDto>();
    }

    private void SelectCategory(CategoryDto category)
    {
        if (!selectedCategories.Any(c => c.Id == category.Id))
        {
            selectedCategories.Add(category);
            selectedCategoryText = category.Name;
        }
    }

    private void RemoveCategory(CategoryDto category)
    {
        selectedCategories.Remove(category);
    }

    private IEnumerable<BlogPostDto> FilteredPosts()
    {
        return blogPosts?
            .Where(post => string.IsNullOrEmpty(searchTerm) || post.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            .Where(post => !selectedCategories.Any() || post.Categories.Any(pc => selectedCategories.Any(sc => sc.Id == pc.Id)))
            ?? Enumerable.Empty<BlogPostDto>();
    }

    private async Task DeletePost(int postId)
    {
        var success = await BlogPostService.DeletePost(postId);
        if (success)
        {
            blogPosts = blogPosts?.Where(post => post.Id != postId).ToList();
            StateHasChanged();
        }
    }

    private void ToggleHeart(int postId)
    {
        if (likedPosts.Contains(postId))
        {
            likedPosts.Remove(postId);
        }
        else
        {
            likedPosts.Add(postId);
        }
    }
}